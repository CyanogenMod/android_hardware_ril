// Generated by the protocol buffer compiler.  DO NOT EDIT!

package com.android.internal.telephony.ril_proto;

public final class RilCmds {
  private RilCmds() {}
  // enum RadioState
  public static final int RADIOSTATE_OFF = 0;
  public static final int RADIOSTATE_UNAVAILABLE = 1;
  public static final int RADIOSTATE_SIM_NOT_READY = 2;
  public static final int RADIOSTATE_SIM_LOCKED_OR_ABSENT = 3;
  public static final int RADIOSTATE_SIM_READY = 4;
  public static final int RADIOSTATE_RUIM_NOT_READY = 5;
  public static final int RADIOSTATE_RUIM_READY = 6;
  public static final int RADIOSTATE_RUIM_LOCKED_OR_ABSENT = 7;
  public static final int RADIOSTATE_NV_NOT_READY = 8;
  public static final int RADIOSTATE_NV_READY = 9;
  
  // enum RilCardState
  public static final int CARDSTATE_ABSENT = 0;
  public static final int CARDSTATE_PRESENT = 1;
  public static final int CARDSTATE_ERROR = 2;
  
  // enum RilPersoSubstate
  public static final int PERSOSUBSTATE_UNKNOWN = 0;
  public static final int PERSOSUBSTATE_IN_PROGRESS = 1;
  public static final int PERSOSUBSTATE_READY = 2;
  public static final int PERSOSUBSTATE_SIM_NETWORK = 3;
  public static final int PERSOSUBSTATE_SIM_NETWORK_SUBSET = 4;
  public static final int PERSOSUBSTATE_SIM_CORPORATE = 5;
  public static final int PERSOSUBSTATE_SIM_SERVICE_PROVIDER = 6;
  public static final int PERSOSUBSTATE_SIM_SIM = 7;
  public static final int PERSOSUBSTATE_SIM_NETWORK_PUK = 8;
  public static final int PERSOSUBSTATE_SIM_NETWORK_SUBSET_PUK = 9;
  public static final int PERSOSUBSTATE_SIM_CORPORATE_PUK = 10;
  public static final int PERSOSUBSTATE_SIM_SERVICE_PROVIDER_PUK = 11;
  public static final int PERSOSUBSTATE_SIM_SIM_PUK = 12;
  public static final int PERSOSUBSTATE_RUIM_NETWORK1 = 13;
  public static final int PERSOSUBSTATE_RUIM_NETWORK2 = 14;
  public static final int PERSOSUBSTATE_RUIM_HRPD = 15;
  public static final int PERSOSUBSTATE_RUIM_CORPORATE = 16;
  public static final int PERSOSUBSTATE_RUIM_SERVICE_PROVIDER = 17;
  public static final int PERSOSUBSTATE_RUIM_RUIM = 18;
  public static final int PERSOSUBSTATE_RUIM_NETWORK1_PUK = 19;
  public static final int PERSOSUBSTATE_RUIM_NETWORK2_PUK = 20;
  public static final int PERSOSUBSTATE_RUIM_HRPD_PUK = 21;
  public static final int PERSOSUBSTATE_RUIM_CORPORATE_PUK = 22;
  public static final int PERSOSUBSTATE_RUIM_SERVICE_PROVIDER_PUK = 23;
  public static final int PERSOSUBSTATE_RUIM_RUIM_PUK = 24;
  
  // enum RilAppState
  public static final int APPSTATE_UNKNOWN = 0;
  public static final int APPSTATE_DETECTED = 1;
  public static final int APPSTATE_PIN = 2;
  public static final int APPSTATE_PUK = 3;
  public static final int APPSTATE_SUBSCRIPTION_PERSO = 4;
  public static final int APPSTATE_READY = 5;
  
  // enum RilPinState
  public static final int PINSTATE_UNKNOWN = 0;
  public static final int PINSTATE_ENABLED_NOT_VERIFIED = 1;
  public static final int PINSTATE_ENABLED_VERIFIED = 2;
  public static final int PINSTATE_DISABLED = 3;
  public static final int PINSTATE_ENABLED_BLOCKED = 4;
  public static final int PINSTATE_ENABLED_PERM_BLOCKED = 5;
  
  // enum RilAppType
  public static final int APPTYPE_UNKNOWN = 0;
  public static final int APPTYPE_SIM = 1;
  public static final int APPTYPE_USIM = 2;
  public static final int APPTYPE_RUIM = 3;
  public static final int APPTYPE_CSIM = 4;
  
  // enum RilUusType
  public static final int RILUUSTYPE1_IMPLICIT = 0;
  public static final int RILUUSTYPE1_REQUIRED = 1;
  public static final int RILUUSTYPE1_NOT_REQUIRED = 2;
  public static final int RILUUSTYPE2_REQUIRED = 3;
  public static final int RILUUSTYPE2_NOT_REQUIRED = 4;
  public static final int RILUUSTYPE3_REQUIRED = 5;
  public static final int RILUUSTYPE3_NOT_REQUIRED = 6;
  
  // enum RilUusDcs
  public static final int RILUUSDCS_USP = 0;
  public static final int RILUUSDCS_OSIHLP = 1;
  public static final int RILUUSDCS_X244 = 2;
  public static final int RILUUSDCS_RMCF = 3;
  public static final int RILUUSDCS_IA5c = 4;
  
  // enum RilCallState
  public static final int CALLSTATE_ACTIVE = 0;
  public static final int CALLSTATE_HOLDING = 1;
  public static final int CALLSTATE_DIALING = 2;
  public static final int CALLSTATE_ALERTING = 3;
  public static final int CALLSTATE_INCOMING = 4;
  public static final int CALLSTATE_WAITING = 5;
  
  public static final class RilAppStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RilAppStatus() {}
    
    // optional .ril_proto.RilAppType app_type = 1;
    public static final int APP_TYPE_FIELD_NUMBER = 1;
    private boolean hasAppType;
    private int appType_ = com.android.internal.telephony.ril_proto.RilCmds.APPTYPE_UNKNOWN;
    public boolean hasAppType() { return hasAppType; }
    public int getAppType() { return appType_; }
    public RilAppStatus setAppType(int value) {
      hasAppType = true;
      appType_ = value;
      return this;
    }
    public RilAppStatus clearAppType() {
      hasAppType = false;
      appType_ = com.android.internal.telephony.ril_proto.RilCmds.APPTYPE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilAppState app_state = 2;
    public static final int APP_STATE_FIELD_NUMBER = 2;
    private boolean hasAppState;
    private int appState_ = com.android.internal.telephony.ril_proto.RilCmds.APPSTATE_UNKNOWN;
    public boolean hasAppState() { return hasAppState; }
    public int getAppState() { return appState_; }
    public RilAppStatus setAppState(int value) {
      hasAppState = true;
      appState_ = value;
      return this;
    }
    public RilAppStatus clearAppState() {
      hasAppState = false;
      appState_ = com.android.internal.telephony.ril_proto.RilCmds.APPSTATE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilPersoSubstate perso_substate = 3;
    public static final int PERSO_SUBSTATE_FIELD_NUMBER = 3;
    private boolean hasPersoSubstate;
    private int persoSubstate_ = com.android.internal.telephony.ril_proto.RilCmds.PERSOSUBSTATE_UNKNOWN;
    public boolean hasPersoSubstate() { return hasPersoSubstate; }
    public int getPersoSubstate() { return persoSubstate_; }
    public RilAppStatus setPersoSubstate(int value) {
      hasPersoSubstate = true;
      persoSubstate_ = value;
      return this;
    }
    public RilAppStatus clearPersoSubstate() {
      hasPersoSubstate = false;
      persoSubstate_ = com.android.internal.telephony.ril_proto.RilCmds.PERSOSUBSTATE_UNKNOWN;
      return this;
    }
    
    // optional string aid = 4;
    public static final int AID_FIELD_NUMBER = 4;
    private boolean hasAid;
    private java.lang.String aid_ = "";
    public java.lang.String getAid() { return aid_; }
    public boolean hasAid() { return hasAid; }
    public RilAppStatus setAid(java.lang.String value) {
      hasAid = true;
      aid_ = value;
      return this;
    }
    public RilAppStatus clearAid() {
      hasAid = false;
      aid_ = "";
      return this;
    }
    
    // optional string app_label = 5;
    public static final int APP_LABEL_FIELD_NUMBER = 5;
    private boolean hasAppLabel;
    private java.lang.String appLabel_ = "";
    public java.lang.String getAppLabel() { return appLabel_; }
    public boolean hasAppLabel() { return hasAppLabel; }
    public RilAppStatus setAppLabel(java.lang.String value) {
      hasAppLabel = true;
      appLabel_ = value;
      return this;
    }
    public RilAppStatus clearAppLabel() {
      hasAppLabel = false;
      appLabel_ = "";
      return this;
    }
    
    // optional int32 pin1_replaced = 6;
    public static final int PIN1_REPLACED_FIELD_NUMBER = 6;
    private boolean hasPin1Replaced;
    private int pin1Replaced_ = 0;
    public int getPin1Replaced() { return pin1Replaced_; }
    public boolean hasPin1Replaced() { return hasPin1Replaced; }
    public RilAppStatus setPin1Replaced(int value) {
      hasPin1Replaced = true;
      pin1Replaced_ = value;
      return this;
    }
    public RilAppStatus clearPin1Replaced() {
      hasPin1Replaced = false;
      pin1Replaced_ = 0;
      return this;
    }
    
    // optional .ril_proto.RilPinState pin1 = 7;
    public static final int PIN1_FIELD_NUMBER = 7;
    private boolean hasPin1;
    private int pin1_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasPin1() { return hasPin1; }
    public int getPin1() { return pin1_; }
    public RilAppStatus setPin1(int value) {
      hasPin1 = true;
      pin1_ = value;
      return this;
    }
    public RilAppStatus clearPin1() {
      hasPin1 = false;
      pin1_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    // optional .ril_proto.RilPinState pin2 = 8;
    public static final int PIN2_FIELD_NUMBER = 8;
    private boolean hasPin2;
    private int pin2_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasPin2() { return hasPin2; }
    public int getPin2() { return pin2_; }
    public RilAppStatus setPin2(int value) {
      hasPin2 = true;
      pin2_ = value;
      return this;
    }
    public RilAppStatus clearPin2() {
      hasPin2 = false;
      pin2_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    public final RilAppStatus clear() {
      clearAppType();
      clearAppState();
      clearPersoSubstate();
      clearAid();
      clearAppLabel();
      clearPin1Replaced();
      clearPin1();
      clearPin2();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasAppType()) {
        output.writeInt32(1, getAppType());
      }
      if (hasAppState()) {
        output.writeInt32(2, getAppState());
      }
      if (hasPersoSubstate()) {
        output.writeInt32(3, getPersoSubstate());
      }
      if (hasAid()) {
        output.writeString(4, getAid());
      }
      if (hasAppLabel()) {
        output.writeString(5, getAppLabel());
      }
      if (hasPin1Replaced()) {
        output.writeInt32(6, getPin1Replaced());
      }
      if (hasPin1()) {
        output.writeInt32(7, getPin1());
      }
      if (hasPin2()) {
        output.writeInt32(8, getPin2());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasAppType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getAppType());
      }
      if (hasAppState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getAppState());
      }
      if (hasPersoSubstate()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getPersoSubstate());
      }
      if (hasAid()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getAid());
      }
      if (hasAppLabel()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(5, getAppLabel());
      }
      if (hasPin1Replaced()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(6, getPin1Replaced());
      }
      if (hasPin1()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(7, getPin1());
      }
      if (hasPin2()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(8, getPin2());
      }
      cachedSize = size;
      return size;
    }
    
    public RilAppStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setAppType(input.readInt32());
            break;
          }
          case 16: {
              setAppState(input.readInt32());
            break;
          }
          case 24: {
              setPersoSubstate(input.readInt32());
            break;
          }
          case 34: {
            setAid(input.readString());
            break;
          }
          case 42: {
            setAppLabel(input.readString());
            break;
          }
          case 48: {
            setPin1Replaced(input.readInt32());
            break;
          }
          case 56: {
              setPin1(input.readInt32());
            break;
          }
          case 64: {
              setPin2(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RilAppStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilAppStatus) (new RilAppStatus().mergeFrom(data));
    }
    
    public static RilAppStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilAppStatus) (new RilAppStatus().mergeFrom(input));
    }
    
  }
  
  public static final class RilCardStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RilCardStatus() {}
    
    // optional .ril_proto.RilCardState card_state = 1;
    public static final int CARD_STATE_FIELD_NUMBER = 1;
    private boolean hasCardState;
    private int cardState_ = com.android.internal.telephony.ril_proto.RilCmds.CARDSTATE_ABSENT;
    public boolean hasCardState() { return hasCardState; }
    public int getCardState() { return cardState_; }
    public RilCardStatus setCardState(int value) {
      hasCardState = true;
      cardState_ = value;
      return this;
    }
    public RilCardStatus clearCardState() {
      hasCardState = false;
      cardState_ = com.android.internal.telephony.ril_proto.RilCmds.CARDSTATE_ABSENT;
      return this;
    }
    
    // optional .ril_proto.RilPinState universal_pin_state = 2;
    public static final int UNIVERSAL_PIN_STATE_FIELD_NUMBER = 2;
    private boolean hasUniversalPinState;
    private int universalPinState_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
    public boolean hasUniversalPinState() { return hasUniversalPinState; }
    public int getUniversalPinState() { return universalPinState_; }
    public RilCardStatus setUniversalPinState(int value) {
      hasUniversalPinState = true;
      universalPinState_ = value;
      return this;
    }
    public RilCardStatus clearUniversalPinState() {
      hasUniversalPinState = false;
      universalPinState_ = com.android.internal.telephony.ril_proto.RilCmds.PINSTATE_UNKNOWN;
      return this;
    }
    
    // optional int32 gsm_umts_subscription_app_index = 3;
    public static final int GSM_UMTS_SUBSCRIPTION_APP_INDEX_FIELD_NUMBER = 3;
    private boolean hasGsmUmtsSubscriptionAppIndex;
    private int gsmUmtsSubscriptionAppIndex_ = 0;
    public int getGsmUmtsSubscriptionAppIndex() { return gsmUmtsSubscriptionAppIndex_; }
    public boolean hasGsmUmtsSubscriptionAppIndex() { return hasGsmUmtsSubscriptionAppIndex; }
    public RilCardStatus setGsmUmtsSubscriptionAppIndex(int value) {
      hasGsmUmtsSubscriptionAppIndex = true;
      gsmUmtsSubscriptionAppIndex_ = value;
      return this;
    }
    public RilCardStatus clearGsmUmtsSubscriptionAppIndex() {
      hasGsmUmtsSubscriptionAppIndex = false;
      gsmUmtsSubscriptionAppIndex_ = 0;
      return this;
    }
    
    // optional int32 cdma_subscription_app_index = 4;
    public static final int CDMA_SUBSCRIPTION_APP_INDEX_FIELD_NUMBER = 4;
    private boolean hasCdmaSubscriptionAppIndex;
    private int cdmaSubscriptionAppIndex_ = 0;
    public int getCdmaSubscriptionAppIndex() { return cdmaSubscriptionAppIndex_; }
    public boolean hasCdmaSubscriptionAppIndex() { return hasCdmaSubscriptionAppIndex; }
    public RilCardStatus setCdmaSubscriptionAppIndex(int value) {
      hasCdmaSubscriptionAppIndex = true;
      cdmaSubscriptionAppIndex_ = value;
      return this;
    }
    public RilCardStatus clearCdmaSubscriptionAppIndex() {
      hasCdmaSubscriptionAppIndex = false;
      cdmaSubscriptionAppIndex_ = 0;
      return this;
    }
    
    // optional int32 num_applications = 5;
    public static final int NUM_APPLICATIONS_FIELD_NUMBER = 5;
    private boolean hasNumApplications;
    private int numApplications_ = 0;
    public int getNumApplications() { return numApplications_; }
    public boolean hasNumApplications() { return hasNumApplications; }
    public RilCardStatus setNumApplications(int value) {
      hasNumApplications = true;
      numApplications_ = value;
      return this;
    }
    public RilCardStatus clearNumApplications() {
      hasNumApplications = false;
      numApplications_ = 0;
      return this;
    }
    
    // repeated .ril_proto.RilAppStatus applications = 6;
    public static final int APPLICATIONS_FIELD_NUMBER = 6;
    private java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus> applications_ =
      java.util.Collections.emptyList();
    public java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus> getApplicationsList() {
      return applications_;
    }
    public int getApplicationsCount() { return applications_.size(); }
    public com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus getApplications(int index) {
      return applications_.get(index);
    }
    public RilCardStatus setApplications(int index, com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      applications_.set(index, value);
      return this;
    }
    public RilCardStatus addApplications(com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      if (applications_.isEmpty()) {
        applications_ = new java.util.ArrayList<com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus>();
      }
      applications_.add(value);
      return this;
    }
    public RilCardStatus clearApplications() {
      applications_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RilCardStatus clear() {
      clearCardState();
      clearUniversalPinState();
      clearGsmUmtsSubscriptionAppIndex();
      clearCdmaSubscriptionAppIndex();
      clearNumApplications();
      clearApplications();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasCardState()) {
        output.writeInt32(1, getCardState());
      }
      if (hasUniversalPinState()) {
        output.writeInt32(2, getUniversalPinState());
      }
      if (hasGsmUmtsSubscriptionAppIndex()) {
        output.writeInt32(3, getGsmUmtsSubscriptionAppIndex());
      }
      if (hasCdmaSubscriptionAppIndex()) {
        output.writeInt32(4, getCdmaSubscriptionAppIndex());
      }
      if (hasNumApplications()) {
        output.writeInt32(5, getNumApplications());
      }
      for (com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus element : getApplicationsList()) {
        output.writeMessage(6, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasCardState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getCardState());
      }
      if (hasUniversalPinState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getUniversalPinState());
      }
      if (hasGsmUmtsSubscriptionAppIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getGsmUmtsSubscriptionAppIndex());
      }
      if (hasCdmaSubscriptionAppIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(4, getCdmaSubscriptionAppIndex());
      }
      if (hasNumApplications()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(5, getNumApplications());
      }
      for (com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus element : getApplicationsList()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(6, element);
      }
      cachedSize = size;
      return size;
    }
    
    public RilCardStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setCardState(input.readInt32());
            break;
          }
          case 16: {
              setUniversalPinState(input.readInt32());
            break;
          }
          case 24: {
            setGsmUmtsSubscriptionAppIndex(input.readInt32());
            break;
          }
          case 32: {
            setCdmaSubscriptionAppIndex(input.readInt32());
            break;
          }
          case 40: {
            setNumApplications(input.readInt32());
            break;
          }
          case 50: {
            com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus value = new com.android.internal.telephony.ril_proto.RilCmds.RilAppStatus();
            input.readMessage(value);
            addApplications(value);
            break;
          }
        }
      }
    }
    
    public static RilCardStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilCardStatus) (new RilCardStatus().mergeFrom(data));
    }
    
    public static RilCardStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilCardStatus) (new RilCardStatus().mergeFrom(input));
    }
    
  }
  
  public static final class RilUusInfo extends
      com.google.protobuf.micro.MessageMicro {
    public RilUusInfo() {}
    
    // optional .ril_proto.RilUusType uus_type = 1;
    public static final int UUS_TYPE_FIELD_NUMBER = 1;
    private boolean hasUusType;
    private int uusType_ = com.android.internal.telephony.ril_proto.RilCmds.RILUUSTYPE1_IMPLICIT;
    public boolean hasUusType() { return hasUusType; }
    public int getUusType() { return uusType_; }
    public RilUusInfo setUusType(int value) {
      hasUusType = true;
      uusType_ = value;
      return this;
    }
    public RilUusInfo clearUusType() {
      hasUusType = false;
      uusType_ = com.android.internal.telephony.ril_proto.RilCmds.RILUUSTYPE1_IMPLICIT;
      return this;
    }
    
    // optional .ril_proto.RilUusDcs uus_dcs = 2;
    public static final int UUS_DCS_FIELD_NUMBER = 2;
    private boolean hasUusDcs;
    private int uusDcs_ = com.android.internal.telephony.ril_proto.RilCmds.RILUUSDCS_USP;
    public boolean hasUusDcs() { return hasUusDcs; }
    public int getUusDcs() { return uusDcs_; }
    public RilUusInfo setUusDcs(int value) {
      hasUusDcs = true;
      uusDcs_ = value;
      return this;
    }
    public RilUusInfo clearUusDcs() {
      hasUusDcs = false;
      uusDcs_ = com.android.internal.telephony.ril_proto.RilCmds.RILUUSDCS_USP;
      return this;
    }
    
    // optional int32 uus_length = 3;
    public static final int UUS_LENGTH_FIELD_NUMBER = 3;
    private boolean hasUusLength;
    private int uusLength_ = 0;
    public int getUusLength() { return uusLength_; }
    public boolean hasUusLength() { return hasUusLength; }
    public RilUusInfo setUusLength(int value) {
      hasUusLength = true;
      uusLength_ = value;
      return this;
    }
    public RilUusInfo clearUusLength() {
      hasUusLength = false;
      uusLength_ = 0;
      return this;
    }
    
    // optional string uus_data = 4;
    public static final int UUS_DATA_FIELD_NUMBER = 4;
    private boolean hasUusData;
    private java.lang.String uusData_ = "";
    public java.lang.String getUusData() { return uusData_; }
    public boolean hasUusData() { return hasUusData; }
    public RilUusInfo setUusData(java.lang.String value) {
      hasUusData = true;
      uusData_ = value;
      return this;
    }
    public RilUusInfo clearUusData() {
      hasUusData = false;
      uusData_ = "";
      return this;
    }
    
    public final RilUusInfo clear() {
      clearUusType();
      clearUusDcs();
      clearUusLength();
      clearUusData();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasUusType()) {
        output.writeInt32(1, getUusType());
      }
      if (hasUusDcs()) {
        output.writeInt32(2, getUusDcs());
      }
      if (hasUusLength()) {
        output.writeInt32(3, getUusLength());
      }
      if (hasUusData()) {
        output.writeString(4, getUusData());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasUusType()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getUusType());
      }
      if (hasUusDcs()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getUusDcs());
      }
      if (hasUusLength()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getUusLength());
      }
      if (hasUusData()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(4, getUusData());
      }
      cachedSize = size;
      return size;
    }
    
    public RilUusInfo mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setUusType(input.readInt32());
            break;
          }
          case 16: {
              setUusDcs(input.readInt32());
            break;
          }
          case 24: {
            setUusLength(input.readInt32());
            break;
          }
          case 34: {
            setUusData(input.readString());
            break;
          }
        }
      }
    }
    
    public static RilUusInfo parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilUusInfo) (new RilUusInfo().mergeFrom(data));
    }
    
    public static RilUusInfo parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilUusInfo) (new RilUusInfo().mergeFrom(input));
    }
    
  }
  
  public static final class RilCall extends
      com.google.protobuf.micro.MessageMicro {
    public RilCall() {}
    
    // optional .ril_proto.RilCallState state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boolean hasState;
    private int state_ = com.android.internal.telephony.ril_proto.RilCmds.CALLSTATE_ACTIVE;
    public boolean hasState() { return hasState; }
    public int getState() { return state_; }
    public RilCall setState(int value) {
      hasState = true;
      state_ = value;
      return this;
    }
    public RilCall clearState() {
      hasState = false;
      state_ = com.android.internal.telephony.ril_proto.RilCmds.CALLSTATE_ACTIVE;
      return this;
    }
    
    // optional int32 index = 2;
    public static final int INDEX_FIELD_NUMBER = 2;
    private boolean hasIndex;
    private int index_ = 0;
    public int getIndex() { return index_; }
    public boolean hasIndex() { return hasIndex; }
    public RilCall setIndex(int value) {
      hasIndex = true;
      index_ = value;
      return this;
    }
    public RilCall clearIndex() {
      hasIndex = false;
      index_ = 0;
      return this;
    }
    
    // optional int32 toa = 3;
    public static final int TOA_FIELD_NUMBER = 3;
    private boolean hasToa;
    private int toa_ = 0;
    public int getToa() { return toa_; }
    public boolean hasToa() { return hasToa; }
    public RilCall setToa(int value) {
      hasToa = true;
      toa_ = value;
      return this;
    }
    public RilCall clearToa() {
      hasToa = false;
      toa_ = 0;
      return this;
    }
    
    // optional bool is_mpty = 4;
    public static final int IS_MPTY_FIELD_NUMBER = 4;
    private boolean hasIsMpty;
    private boolean isMpty_ = false;
    public boolean getIsMpty() { return isMpty_; }
    public boolean hasIsMpty() { return hasIsMpty; }
    public RilCall setIsMpty(boolean value) {
      hasIsMpty = true;
      isMpty_ = value;
      return this;
    }
    public RilCall clearIsMpty() {
      hasIsMpty = false;
      isMpty_ = false;
      return this;
    }
    
    // optional bool is_mt = 5;
    public static final int IS_MT_FIELD_NUMBER = 5;
    private boolean hasIsMt;
    private boolean isMt_ = false;
    public boolean getIsMt() { return isMt_; }
    public boolean hasIsMt() { return hasIsMt; }
    public RilCall setIsMt(boolean value) {
      hasIsMt = true;
      isMt_ = value;
      return this;
    }
    public RilCall clearIsMt() {
      hasIsMt = false;
      isMt_ = false;
      return this;
    }
    
    // optional int32 als = 6;
    public static final int ALS_FIELD_NUMBER = 6;
    private boolean hasAls;
    private int als_ = 0;
    public int getAls() { return als_; }
    public boolean hasAls() { return hasAls; }
    public RilCall setAls(int value) {
      hasAls = true;
      als_ = value;
      return this;
    }
    public RilCall clearAls() {
      hasAls = false;
      als_ = 0;
      return this;
    }
    
    // optional bool is_voice = 7;
    public static final int IS_VOICE_FIELD_NUMBER = 7;
    private boolean hasIsVoice;
    private boolean isVoice_ = false;
    public boolean getIsVoice() { return isVoice_; }
    public boolean hasIsVoice() { return hasIsVoice; }
    public RilCall setIsVoice(boolean value) {
      hasIsVoice = true;
      isVoice_ = value;
      return this;
    }
    public RilCall clearIsVoice() {
      hasIsVoice = false;
      isVoice_ = false;
      return this;
    }
    
    // optional bool is_voice_privacy = 8;
    public static final int IS_VOICE_PRIVACY_FIELD_NUMBER = 8;
    private boolean hasIsVoicePrivacy;
    private boolean isVoicePrivacy_ = false;
    public boolean getIsVoicePrivacy() { return isVoicePrivacy_; }
    public boolean hasIsVoicePrivacy() { return hasIsVoicePrivacy; }
    public RilCall setIsVoicePrivacy(boolean value) {
      hasIsVoicePrivacy = true;
      isVoicePrivacy_ = value;
      return this;
    }
    public RilCall clearIsVoicePrivacy() {
      hasIsVoicePrivacy = false;
      isVoicePrivacy_ = false;
      return this;
    }
    
    // optional string number = 9;
    public static final int NUMBER_FIELD_NUMBER = 9;
    private boolean hasNumber;
    private java.lang.String number_ = "";
    public java.lang.String getNumber() { return number_; }
    public boolean hasNumber() { return hasNumber; }
    public RilCall setNumber(java.lang.String value) {
      hasNumber = true;
      number_ = value;
      return this;
    }
    public RilCall clearNumber() {
      hasNumber = false;
      number_ = "";
      return this;
    }
    
    // optional int32 number_presentation = 10;
    public static final int NUMBER_PRESENTATION_FIELD_NUMBER = 10;
    private boolean hasNumberPresentation;
    private int numberPresentation_ = 0;
    public int getNumberPresentation() { return numberPresentation_; }
    public boolean hasNumberPresentation() { return hasNumberPresentation; }
    public RilCall setNumberPresentation(int value) {
      hasNumberPresentation = true;
      numberPresentation_ = value;
      return this;
    }
    public RilCall clearNumberPresentation() {
      hasNumberPresentation = false;
      numberPresentation_ = 0;
      return this;
    }
    
    // optional string name = 11;
    public static final int NAME_FIELD_NUMBER = 11;
    private boolean hasName;
    private java.lang.String name_ = "";
    public java.lang.String getName() { return name_; }
    public boolean hasName() { return hasName; }
    public RilCall setName(java.lang.String value) {
      hasName = true;
      name_ = value;
      return this;
    }
    public RilCall clearName() {
      hasName = false;
      name_ = "";
      return this;
    }
    
    // optional int32 name_presentation = 12;
    public static final int NAME_PRESENTATION_FIELD_NUMBER = 12;
    private boolean hasNamePresentation;
    private int namePresentation_ = 0;
    public int getNamePresentation() { return namePresentation_; }
    public boolean hasNamePresentation() { return hasNamePresentation; }
    public RilCall setNamePresentation(int value) {
      hasNamePresentation = true;
      namePresentation_ = value;
      return this;
    }
    public RilCall clearNamePresentation() {
      hasNamePresentation = false;
      namePresentation_ = 0;
      return this;
    }
    
    // optional .ril_proto.RilUusInfo uus_info = 13;
    public static final int UUS_INFO_FIELD_NUMBER = 13;
    private boolean hasUusInfo;
    private com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo uusInfo_ = null;
    public boolean hasUusInfo() { return hasUusInfo; }
    public com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo getUusInfo() { return uusInfo_; }
    public RilCall setUusInfo(com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasUusInfo = true;
      uusInfo_ = value;
      return this;
    }
    public RilCall clearUusInfo() {
      hasUusInfo = false;
      uusInfo_ = null;
      return this;
    }
    
    public final RilCall clear() {
      clearState();
      clearIndex();
      clearToa();
      clearIsMpty();
      clearIsMt();
      clearAls();
      clearIsVoice();
      clearIsVoicePrivacy();
      clearNumber();
      clearNumberPresentation();
      clearName();
      clearNamePresentation();
      clearUusInfo();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasState()) {
        output.writeInt32(1, getState());
      }
      if (hasIndex()) {
        output.writeInt32(2, getIndex());
      }
      if (hasToa()) {
        output.writeInt32(3, getToa());
      }
      if (hasIsMpty()) {
        output.writeBool(4, getIsMpty());
      }
      if (hasIsMt()) {
        output.writeBool(5, getIsMt());
      }
      if (hasAls()) {
        output.writeInt32(6, getAls());
      }
      if (hasIsVoice()) {
        output.writeBool(7, getIsVoice());
      }
      if (hasIsVoicePrivacy()) {
        output.writeBool(8, getIsVoicePrivacy());
      }
      if (hasNumber()) {
        output.writeString(9, getNumber());
      }
      if (hasNumberPresentation()) {
        output.writeInt32(10, getNumberPresentation());
      }
      if (hasName()) {
        output.writeString(11, getName());
      }
      if (hasNamePresentation()) {
        output.writeInt32(12, getNamePresentation());
      }
      if (hasUusInfo()) {
        output.writeMessage(13, getUusInfo());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getState());
      }
      if (hasIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getIndex());
      }
      if (hasToa()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getToa());
      }
      if (hasIsMpty()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(4, getIsMpty());
      }
      if (hasIsMt()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(5, getIsMt());
      }
      if (hasAls()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(6, getAls());
      }
      if (hasIsVoice()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(7, getIsVoice());
      }
      if (hasIsVoicePrivacy()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(8, getIsVoicePrivacy());
      }
      if (hasNumber()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(9, getNumber());
      }
      if (hasNumberPresentation()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(10, getNumberPresentation());
      }
      if (hasName()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(11, getName());
      }
      if (hasNamePresentation()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(12, getNamePresentation());
      }
      if (hasUusInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(13, getUusInfo());
      }
      cachedSize = size;
      return size;
    }
    
    public RilCall mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
              setState(input.readInt32());
            break;
          }
          case 16: {
            setIndex(input.readInt32());
            break;
          }
          case 24: {
            setToa(input.readInt32());
            break;
          }
          case 32: {
            setIsMpty(input.readBool());
            break;
          }
          case 40: {
            setIsMt(input.readBool());
            break;
          }
          case 48: {
            setAls(input.readInt32());
            break;
          }
          case 56: {
            setIsVoice(input.readBool());
            break;
          }
          case 64: {
            setIsVoicePrivacy(input.readBool());
            break;
          }
          case 74: {
            setNumber(input.readString());
            break;
          }
          case 80: {
            setNumberPresentation(input.readInt32());
            break;
          }
          case 90: {
            setName(input.readString());
            break;
          }
          case 96: {
            setNamePresentation(input.readInt32());
            break;
          }
          case 106: {
            com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo value = new com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo();
            input.readMessage(value);
            setUusInfo(value);
            break;
          }
        }
      }
    }
    
    public static RilCall parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RilCall) (new RilCall().mergeFrom(data));
    }
    
    public static RilCall parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RilCall) (new RilCall().mergeFrom(input));
    }
    
  }
  
  public static final class RILGWSignalStrength extends
      com.google.protobuf.micro.MessageMicro {
    public RILGWSignalStrength() {}
    
    // optional int32 signal_strength = 1;
    public static final int SIGNAL_STRENGTH_FIELD_NUMBER = 1;
    private boolean hasSignalStrength;
    private int signalStrength_ = 0;
    public int getSignalStrength() { return signalStrength_; }
    public boolean hasSignalStrength() { return hasSignalStrength; }
    public RILGWSignalStrength setSignalStrength(int value) {
      hasSignalStrength = true;
      signalStrength_ = value;
      return this;
    }
    public RILGWSignalStrength clearSignalStrength() {
      hasSignalStrength = false;
      signalStrength_ = 0;
      return this;
    }
    
    // optional int32 bit_error_rate = 2;
    public static final int BIT_ERROR_RATE_FIELD_NUMBER = 2;
    private boolean hasBitErrorRate;
    private int bitErrorRate_ = 0;
    public int getBitErrorRate() { return bitErrorRate_; }
    public boolean hasBitErrorRate() { return hasBitErrorRate; }
    public RILGWSignalStrength setBitErrorRate(int value) {
      hasBitErrorRate = true;
      bitErrorRate_ = value;
      return this;
    }
    public RILGWSignalStrength clearBitErrorRate() {
      hasBitErrorRate = false;
      bitErrorRate_ = 0;
      return this;
    }
    
    public final RILGWSignalStrength clear() {
      clearSignalStrength();
      clearBitErrorRate();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasSignalStrength()) {
        output.writeInt32(1, getSignalStrength());
      }
      if (hasBitErrorRate()) {
        output.writeInt32(2, getBitErrorRate());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasSignalStrength()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getSignalStrength());
      }
      if (hasBitErrorRate()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getBitErrorRate());
      }
      cachedSize = size;
      return size;
    }
    
    public RILGWSignalStrength mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setSignalStrength(input.readInt32());
            break;
          }
          case 16: {
            setBitErrorRate(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RILGWSignalStrength parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RILGWSignalStrength) (new RILGWSignalStrength().mergeFrom(data));
    }
    
    public static RILGWSignalStrength parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RILGWSignalStrength) (new RILGWSignalStrength().mergeFrom(input));
    }
    
  }
  
  public static final class RILCDMASignalStrength extends
      com.google.protobuf.micro.MessageMicro {
    public RILCDMASignalStrength() {}
    
    // optional int32 dbm = 1;
    public static final int DBM_FIELD_NUMBER = 1;
    private boolean hasDbm;
    private int dbm_ = 0;
    public int getDbm() { return dbm_; }
    public boolean hasDbm() { return hasDbm; }
    public RILCDMASignalStrength setDbm(int value) {
      hasDbm = true;
      dbm_ = value;
      return this;
    }
    public RILCDMASignalStrength clearDbm() {
      hasDbm = false;
      dbm_ = 0;
      return this;
    }
    
    // optional int32 ecio = 2;
    public static final int ECIO_FIELD_NUMBER = 2;
    private boolean hasEcio;
    private int ecio_ = 0;
    public int getEcio() { return ecio_; }
    public boolean hasEcio() { return hasEcio; }
    public RILCDMASignalStrength setEcio(int value) {
      hasEcio = true;
      ecio_ = value;
      return this;
    }
    public RILCDMASignalStrength clearEcio() {
      hasEcio = false;
      ecio_ = 0;
      return this;
    }
    
    public final RILCDMASignalStrength clear() {
      clearDbm();
      clearEcio();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasDbm()) {
        output.writeInt32(1, getDbm());
      }
      if (hasEcio()) {
        output.writeInt32(2, getEcio());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasDbm()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getDbm());
      }
      if (hasEcio()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getEcio());
      }
      cachedSize = size;
      return size;
    }
    
    public RILCDMASignalStrength mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setDbm(input.readInt32());
            break;
          }
          case 16: {
            setEcio(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RILCDMASignalStrength parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RILCDMASignalStrength) (new RILCDMASignalStrength().mergeFrom(data));
    }
    
    public static RILCDMASignalStrength parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RILCDMASignalStrength) (new RILCDMASignalStrength().mergeFrom(input));
    }
    
  }
  
  public static final class RILEVDOSignalStrength extends
      com.google.protobuf.micro.MessageMicro {
    public RILEVDOSignalStrength() {}
    
    // optional int32 dbm = 1;
    public static final int DBM_FIELD_NUMBER = 1;
    private boolean hasDbm;
    private int dbm_ = 0;
    public int getDbm() { return dbm_; }
    public boolean hasDbm() { return hasDbm; }
    public RILEVDOSignalStrength setDbm(int value) {
      hasDbm = true;
      dbm_ = value;
      return this;
    }
    public RILEVDOSignalStrength clearDbm() {
      hasDbm = false;
      dbm_ = 0;
      return this;
    }
    
    // optional int32 ecio = 2;
    public static final int ECIO_FIELD_NUMBER = 2;
    private boolean hasEcio;
    private int ecio_ = 0;
    public int getEcio() { return ecio_; }
    public boolean hasEcio() { return hasEcio; }
    public RILEVDOSignalStrength setEcio(int value) {
      hasEcio = true;
      ecio_ = value;
      return this;
    }
    public RILEVDOSignalStrength clearEcio() {
      hasEcio = false;
      ecio_ = 0;
      return this;
    }
    
    // optional int32 signal_noise_ratio = 3;
    public static final int SIGNAL_NOISE_RATIO_FIELD_NUMBER = 3;
    private boolean hasSignalNoiseRatio;
    private int signalNoiseRatio_ = 0;
    public int getSignalNoiseRatio() { return signalNoiseRatio_; }
    public boolean hasSignalNoiseRatio() { return hasSignalNoiseRatio; }
    public RILEVDOSignalStrength setSignalNoiseRatio(int value) {
      hasSignalNoiseRatio = true;
      signalNoiseRatio_ = value;
      return this;
    }
    public RILEVDOSignalStrength clearSignalNoiseRatio() {
      hasSignalNoiseRatio = false;
      signalNoiseRatio_ = 0;
      return this;
    }
    
    public final RILEVDOSignalStrength clear() {
      clearDbm();
      clearEcio();
      clearSignalNoiseRatio();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasDbm()) {
        output.writeInt32(1, getDbm());
      }
      if (hasEcio()) {
        output.writeInt32(2, getEcio());
      }
      if (hasSignalNoiseRatio()) {
        output.writeInt32(3, getSignalNoiseRatio());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasDbm()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getDbm());
      }
      if (hasEcio()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getEcio());
      }
      if (hasSignalNoiseRatio()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(3, getSignalNoiseRatio());
      }
      cachedSize = size;
      return size;
    }
    
    public RILEVDOSignalStrength mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setDbm(input.readInt32());
            break;
          }
          case 16: {
            setEcio(input.readInt32());
            break;
          }
          case 24: {
            setSignalNoiseRatio(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RILEVDOSignalStrength parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RILEVDOSignalStrength) (new RILEVDOSignalStrength().mergeFrom(data));
    }
    
    public static RILEVDOSignalStrength parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RILEVDOSignalStrength) (new RILEVDOSignalStrength().mergeFrom(input));
    }
    
  }
  
  public static final class RspStrings extends
      com.google.protobuf.micro.MessageMicro {
    public RspStrings() {}
    
    // repeated string strings = 1;
    public static final int STRINGS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.String> strings_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.String> getStringsList() {
      return strings_;
    }
    public int getStringsCount() { return strings_.size(); }
    public java.lang.String getStrings(int index) {
      return strings_.get(index);
    }
    public RspStrings setStrings(int index, java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  strings_.set(index, value);
      return this;
    }
    public RspStrings addStrings(java.lang.String value) {
      if (value == null) {
    throw new NullPointerException();
  }
  if (strings_.isEmpty()) {
        strings_ = new java.util.ArrayList<java.lang.String>();
      }
      strings_.add(value);
      return this;
    }
    public RspStrings clearStrings() {
      strings_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RspStrings clear() {
      clearStrings();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (java.lang.String element : getStringsList()) {
        output.writeString(1, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (java.lang.String element : getStringsList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getStringsList().size();
      }
      cachedSize = size;
      return size;
    }
    
    public RspStrings mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            addStrings(input.readString());
            break;
          }
        }
      }
    }
    
    public static RspStrings parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspStrings) (new RspStrings().mergeFrom(data));
    }
    
    public static RspStrings parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspStrings) (new RspStrings().mergeFrom(input));
    }
    
  }
  
  public static final class RspIntegers extends
      com.google.protobuf.micro.MessageMicro {
    public RspIntegers() {}
    
    // repeated int32 integers = 1;
    public static final int INTEGERS_FIELD_NUMBER = 1;
    private java.util.List<java.lang.Integer> integers_ =
      java.util.Collections.emptyList();
    public java.util.List<java.lang.Integer> getIntegersList() {
      return integers_;
    }
    public int getIntegersCount() { return integers_.size(); }
    public int getIntegers(int index) {
      return integers_.get(index);
    }
    public RspIntegers setIntegers(int index, int value) {
      integers_.set(index, value);
      return this;
    }
    public RspIntegers addIntegers(int value) {
      if (integers_.isEmpty()) {
        integers_ = new java.util.ArrayList<java.lang.Integer>();
      }
      integers_.add(value);
      return this;
    }
    public RspIntegers clearIntegers() {
      integers_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RspIntegers clear() {
      clearIntegers();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (int element : getIntegersList()) {
        output.writeInt32(1, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      {
        int dataSize = 0;
        for (int element : getIntegersList()) {
          dataSize += com.google.protobuf.micro.CodedOutputStreamMicro
            .computeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * getIntegersList().size();
      }
      cachedSize = size;
      return size;
    }
    
    public RspIntegers mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            addIntegers(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RspIntegers parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspIntegers) (new RspIntegers().mergeFrom(data));
    }
    
    public static RspIntegers parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspIntegers) (new RspIntegers().mergeFrom(input));
    }
    
  }
  
  public static final class RspGetSimStatus extends
      com.google.protobuf.micro.MessageMicro {
    public RspGetSimStatus() {}
    
    // required .ril_proto.RilCardStatus card_status = 1;
    public static final int CARD_STATUS_FIELD_NUMBER = 1;
    private boolean hasCardStatus;
    private com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus cardStatus_ = null;
    public boolean hasCardStatus() { return hasCardStatus; }
    public com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus getCardStatus() { return cardStatus_; }
    public RspGetSimStatus setCardStatus(com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasCardStatus = true;
      cardStatus_ = value;
      return this;
    }
    public RspGetSimStatus clearCardStatus() {
      hasCardStatus = false;
      cardStatus_ = null;
      return this;
    }
    
    public final RspGetSimStatus clear() {
      clearCardStatus();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasCardStatus) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasCardStatus()) {
        output.writeMessage(1, getCardStatus());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasCardStatus()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getCardStatus());
      }
      cachedSize = size;
      return size;
    }
    
    public RspGetSimStatus mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus value = new com.android.internal.telephony.ril_proto.RilCmds.RilCardStatus();
            input.readMessage(value);
            setCardStatus(value);
            break;
          }
        }
      }
    }
    
    public static RspGetSimStatus parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspGetSimStatus) (new RspGetSimStatus().mergeFrom(data));
    }
    
    public static RspGetSimStatus parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspGetSimStatus) (new RspGetSimStatus().mergeFrom(input));
    }
    
  }
  
  public static final class ReqEnterSimPin extends
      com.google.protobuf.micro.MessageMicro {
    public ReqEnterSimPin() {}
    
    // required string pin = 1;
    public static final int PIN_FIELD_NUMBER = 1;
    private boolean hasPin;
    private java.lang.String pin_ = "";
    public java.lang.String getPin() { return pin_; }
    public boolean hasPin() { return hasPin; }
    public ReqEnterSimPin setPin(java.lang.String value) {
      hasPin = true;
      pin_ = value;
      return this;
    }
    public ReqEnterSimPin clearPin() {
      hasPin = false;
      pin_ = "";
      return this;
    }
    
    public final ReqEnterSimPin clear() {
      clearPin();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasPin) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasPin()) {
        output.writeString(1, getPin());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasPin()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getPin());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqEnterSimPin mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setPin(input.readString());
            break;
          }
        }
      }
    }
    
    public static ReqEnterSimPin parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqEnterSimPin) (new ReqEnterSimPin().mergeFrom(data));
    }
    
    public static ReqEnterSimPin parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqEnterSimPin) (new ReqEnterSimPin().mergeFrom(input));
    }
    
  }
  
  public static final class RspEnterSimPin extends
      com.google.protobuf.micro.MessageMicro {
    public RspEnterSimPin() {}
    
    // required int32 retries_remaining = 1;
    public static final int RETRIES_REMAINING_FIELD_NUMBER = 1;
    private boolean hasRetriesRemaining;
    private int retriesRemaining_ = 0;
    public int getRetriesRemaining() { return retriesRemaining_; }
    public boolean hasRetriesRemaining() { return hasRetriesRemaining; }
    public RspEnterSimPin setRetriesRemaining(int value) {
      hasRetriesRemaining = true;
      retriesRemaining_ = value;
      return this;
    }
    public RspEnterSimPin clearRetriesRemaining() {
      hasRetriesRemaining = false;
      retriesRemaining_ = 0;
      return this;
    }
    
    public final RspEnterSimPin clear() {
      clearRetriesRemaining();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasRetriesRemaining) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasRetriesRemaining()) {
        output.writeInt32(1, getRetriesRemaining());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasRetriesRemaining()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getRetriesRemaining());
      }
      cachedSize = size;
      return size;
    }
    
    public RspEnterSimPin mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setRetriesRemaining(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RspEnterSimPin parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspEnterSimPin) (new RspEnterSimPin().mergeFrom(data));
    }
    
    public static RspEnterSimPin parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspEnterSimPin) (new RspEnterSimPin().mergeFrom(input));
    }
    
  }
  
  public static final class RspGetCurrentCalls extends
      com.google.protobuf.micro.MessageMicro {
    public RspGetCurrentCalls() {}
    
    // repeated .ril_proto.RilCall calls = 1;
    public static final int CALLS_FIELD_NUMBER = 1;
    private java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilCall> calls_ =
      java.util.Collections.emptyList();
    public java.util.List<com.android.internal.telephony.ril_proto.RilCmds.RilCall> getCallsList() {
      return calls_;
    }
    public int getCallsCount() { return calls_.size(); }
    public com.android.internal.telephony.ril_proto.RilCmds.RilCall getCalls(int index) {
      return calls_.get(index);
    }
    public RspGetCurrentCalls setCalls(int index, com.android.internal.telephony.ril_proto.RilCmds.RilCall value) {
      if (value == null) {
        throw new NullPointerException();
      }
      calls_.set(index, value);
      return this;
    }
    public RspGetCurrentCalls addCalls(com.android.internal.telephony.ril_proto.RilCmds.RilCall value) {
      if (value == null) {
        throw new NullPointerException();
      }
      if (calls_.isEmpty()) {
        calls_ = new java.util.ArrayList<com.android.internal.telephony.ril_proto.RilCmds.RilCall>();
      }
      calls_.add(value);
      return this;
    }
    public RspGetCurrentCalls clearCalls() {
      calls_ = java.util.Collections.emptyList();
      return this;
    }
    
    public final RspGetCurrentCalls clear() {
      clearCalls();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      for (com.android.internal.telephony.ril_proto.RilCmds.RilCall element : getCallsList()) {
        output.writeMessage(1, element);
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      for (com.android.internal.telephony.ril_proto.RilCmds.RilCall element : getCallsList()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, element);
      }
      cachedSize = size;
      return size;
    }
    
    public RspGetCurrentCalls mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.android.internal.telephony.ril_proto.RilCmds.RilCall value = new com.android.internal.telephony.ril_proto.RilCmds.RilCall();
            input.readMessage(value);
            addCalls(value);
            break;
          }
        }
      }
    }
    
    public static RspGetCurrentCalls parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspGetCurrentCalls) (new RspGetCurrentCalls().mergeFrom(data));
    }
    
    public static RspGetCurrentCalls parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspGetCurrentCalls) (new RspGetCurrentCalls().mergeFrom(input));
    }
    
  }
  
  public static final class ReqDial extends
      com.google.protobuf.micro.MessageMicro {
    public ReqDial() {}
    
    // optional string address = 1;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private boolean hasAddress;
    private java.lang.String address_ = "";
    public java.lang.String getAddress() { return address_; }
    public boolean hasAddress() { return hasAddress; }
    public ReqDial setAddress(java.lang.String value) {
      hasAddress = true;
      address_ = value;
      return this;
    }
    public ReqDial clearAddress() {
      hasAddress = false;
      address_ = "";
      return this;
    }
    
    // optional int32 clir = 2;
    public static final int CLIR_FIELD_NUMBER = 2;
    private boolean hasClir;
    private int clir_ = 0;
    public int getClir() { return clir_; }
    public boolean hasClir() { return hasClir; }
    public ReqDial setClir(int value) {
      hasClir = true;
      clir_ = value;
      return this;
    }
    public ReqDial clearClir() {
      hasClir = false;
      clir_ = 0;
      return this;
    }
    
    // optional .ril_proto.RilUusInfo uus_info = 3;
    public static final int UUS_INFO_FIELD_NUMBER = 3;
    private boolean hasUusInfo;
    private com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo uusInfo_ = null;
    public boolean hasUusInfo() { return hasUusInfo; }
    public com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo getUusInfo() { return uusInfo_; }
    public ReqDial setUusInfo(com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasUusInfo = true;
      uusInfo_ = value;
      return this;
    }
    public ReqDial clearUusInfo() {
      hasUusInfo = false;
      uusInfo_ = null;
      return this;
    }
    
    public final ReqDial clear() {
      clearAddress();
      clearClir();
      clearUusInfo();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasAddress()) {
        output.writeString(1, getAddress());
      }
      if (hasClir()) {
        output.writeInt32(2, getClir());
      }
      if (hasUusInfo()) {
        output.writeMessage(3, getUusInfo());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasAddress()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getAddress());
      }
      if (hasClir()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(2, getClir());
      }
      if (hasUusInfo()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, getUusInfo());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqDial mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setAddress(input.readString());
            break;
          }
          case 16: {
            setClir(input.readInt32());
            break;
          }
          case 26: {
            com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo value = new com.android.internal.telephony.ril_proto.RilCmds.RilUusInfo();
            input.readMessage(value);
            setUusInfo(value);
            break;
          }
        }
      }
    }
    
    public static ReqDial parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqDial) (new ReqDial().mergeFrom(data));
    }
    
    public static ReqDial parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqDial) (new ReqDial().mergeFrom(input));
    }
    
  }
  
  public static final class ReqHangUp extends
      com.google.protobuf.micro.MessageMicro {
    public ReqHangUp() {}
    
    // required int32 connection_index = 1;
    public static final int CONNECTION_INDEX_FIELD_NUMBER = 1;
    private boolean hasConnectionIndex;
    private int connectionIndex_ = 0;
    public int getConnectionIndex() { return connectionIndex_; }
    public boolean hasConnectionIndex() { return hasConnectionIndex; }
    public ReqHangUp setConnectionIndex(int value) {
      hasConnectionIndex = true;
      connectionIndex_ = value;
      return this;
    }
    public ReqHangUp clearConnectionIndex() {
      hasConnectionIndex = false;
      connectionIndex_ = 0;
      return this;
    }
    
    public final ReqHangUp clear() {
      clearConnectionIndex();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasConnectionIndex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasConnectionIndex()) {
        output.writeInt32(1, getConnectionIndex());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasConnectionIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getConnectionIndex());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqHangUp mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setConnectionIndex(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static ReqHangUp parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqHangUp) (new ReqHangUp().mergeFrom(data));
    }
    
    public static ReqHangUp parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqHangUp) (new ReqHangUp().mergeFrom(input));
    }
    
  }
  
  public static final class RspLastCallFailCause extends
      com.google.protobuf.micro.MessageMicro {
    public RspLastCallFailCause() {}
    
    // required int32 last_call_fail_cause = 1;
    public static final int LAST_CALL_FAIL_CAUSE_FIELD_NUMBER = 1;
    private boolean hasLastCallFailCause;
    private int lastCallFailCause_ = 0;
    public int getLastCallFailCause() { return lastCallFailCause_; }
    public boolean hasLastCallFailCause() { return hasLastCallFailCause; }
    public RspLastCallFailCause setLastCallFailCause(int value) {
      hasLastCallFailCause = true;
      lastCallFailCause_ = value;
      return this;
    }
    public RspLastCallFailCause clearLastCallFailCause() {
      hasLastCallFailCause = false;
      lastCallFailCause_ = 0;
      return this;
    }
    
    public final RspLastCallFailCause clear() {
      clearLastCallFailCause();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasLastCallFailCause) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasLastCallFailCause()) {
        output.writeInt32(1, getLastCallFailCause());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasLastCallFailCause()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getLastCallFailCause());
      }
      cachedSize = size;
      return size;
    }
    
    public RspLastCallFailCause mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setLastCallFailCause(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static RspLastCallFailCause parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspLastCallFailCause) (new RspLastCallFailCause().mergeFrom(data));
    }
    
    public static RspLastCallFailCause parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspLastCallFailCause) (new RspLastCallFailCause().mergeFrom(input));
    }
    
  }
  
  public static final class RspSignalStrength extends
      com.google.protobuf.micro.MessageMicro {
    public RspSignalStrength() {}
    
    // optional .ril_proto.RILGWSignalStrength gw_signalstrength = 1;
    public static final int GW_SIGNALSTRENGTH_FIELD_NUMBER = 1;
    private boolean hasGwSignalstrength;
    private com.android.internal.telephony.ril_proto.RilCmds.RILGWSignalStrength gwSignalstrength_ = null;
    public boolean hasGwSignalstrength() { return hasGwSignalstrength; }
    public com.android.internal.telephony.ril_proto.RilCmds.RILGWSignalStrength getGwSignalstrength() { return gwSignalstrength_; }
    public RspSignalStrength setGwSignalstrength(com.android.internal.telephony.ril_proto.RilCmds.RILGWSignalStrength value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasGwSignalstrength = true;
      gwSignalstrength_ = value;
      return this;
    }
    public RspSignalStrength clearGwSignalstrength() {
      hasGwSignalstrength = false;
      gwSignalstrength_ = null;
      return this;
    }
    
    // optional .ril_proto.RILCDMASignalStrength cdma_signalstrength = 2;
    public static final int CDMA_SIGNALSTRENGTH_FIELD_NUMBER = 2;
    private boolean hasCdmaSignalstrength;
    private com.android.internal.telephony.ril_proto.RilCmds.RILCDMASignalStrength cdmaSignalstrength_ = null;
    public boolean hasCdmaSignalstrength() { return hasCdmaSignalstrength; }
    public com.android.internal.telephony.ril_proto.RilCmds.RILCDMASignalStrength getCdmaSignalstrength() { return cdmaSignalstrength_; }
    public RspSignalStrength setCdmaSignalstrength(com.android.internal.telephony.ril_proto.RilCmds.RILCDMASignalStrength value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasCdmaSignalstrength = true;
      cdmaSignalstrength_ = value;
      return this;
    }
    public RspSignalStrength clearCdmaSignalstrength() {
      hasCdmaSignalstrength = false;
      cdmaSignalstrength_ = null;
      return this;
    }
    
    // optional .ril_proto.RILEVDOSignalStrength evdo_signalstrength = 3;
    public static final int EVDO_SIGNALSTRENGTH_FIELD_NUMBER = 3;
    private boolean hasEvdoSignalstrength;
    private com.android.internal.telephony.ril_proto.RilCmds.RILEVDOSignalStrength evdoSignalstrength_ = null;
    public boolean hasEvdoSignalstrength() { return hasEvdoSignalstrength; }
    public com.android.internal.telephony.ril_proto.RilCmds.RILEVDOSignalStrength getEvdoSignalstrength() { return evdoSignalstrength_; }
    public RspSignalStrength setEvdoSignalstrength(com.android.internal.telephony.ril_proto.RilCmds.RILEVDOSignalStrength value) {
      if (value == null) {
        throw new NullPointerException();
      }
      hasEvdoSignalstrength = true;
      evdoSignalstrength_ = value;
      return this;
    }
    public RspSignalStrength clearEvdoSignalstrength() {
      hasEvdoSignalstrength = false;
      evdoSignalstrength_ = null;
      return this;
    }
    
    public final RspSignalStrength clear() {
      clearGwSignalstrength();
      clearCdmaSignalstrength();
      clearEvdoSignalstrength();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasGwSignalstrength()) {
        output.writeMessage(1, getGwSignalstrength());
      }
      if (hasCdmaSignalstrength()) {
        output.writeMessage(2, getCdmaSignalstrength());
      }
      if (hasEvdoSignalstrength()) {
        output.writeMessage(3, getEvdoSignalstrength());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasGwSignalstrength()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(1, getGwSignalstrength());
      }
      if (hasCdmaSignalstrength()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(2, getCdmaSignalstrength());
      }
      if (hasEvdoSignalstrength()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeMessageSize(3, getEvdoSignalstrength());
      }
      cachedSize = size;
      return size;
    }
    
    public RspSignalStrength mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            com.android.internal.telephony.ril_proto.RilCmds.RILGWSignalStrength value = new com.android.internal.telephony.ril_proto.RilCmds.RILGWSignalStrength();
            input.readMessage(value);
            setGwSignalstrength(value);
            break;
          }
          case 18: {
            com.android.internal.telephony.ril_proto.RilCmds.RILCDMASignalStrength value = new com.android.internal.telephony.ril_proto.RilCmds.RILCDMASignalStrength();
            input.readMessage(value);
            setCdmaSignalstrength(value);
            break;
          }
          case 26: {
            com.android.internal.telephony.ril_proto.RilCmds.RILEVDOSignalStrength value = new com.android.internal.telephony.ril_proto.RilCmds.RILEVDOSignalStrength();
            input.readMessage(value);
            setEvdoSignalstrength(value);
            break;
          }
        }
      }
    }
    
    public static RspSignalStrength parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspSignalStrength) (new RspSignalStrength().mergeFrom(data));
    }
    
    public static RspSignalStrength parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspSignalStrength) (new RspSignalStrength().mergeFrom(input));
    }
    
  }
  
  public static final class RspOperator extends
      com.google.protobuf.micro.MessageMicro {
    public RspOperator() {}
    
    // optional string long_alpha_ons = 1;
    public static final int LONG_ALPHA_ONS_FIELD_NUMBER = 1;
    private boolean hasLongAlphaOns;
    private java.lang.String longAlphaOns_ = "";
    public java.lang.String getLongAlphaOns() { return longAlphaOns_; }
    public boolean hasLongAlphaOns() { return hasLongAlphaOns; }
    public RspOperator setLongAlphaOns(java.lang.String value) {
      hasLongAlphaOns = true;
      longAlphaOns_ = value;
      return this;
    }
    public RspOperator clearLongAlphaOns() {
      hasLongAlphaOns = false;
      longAlphaOns_ = "";
      return this;
    }
    
    // optional string short_alpha_ons = 2;
    public static final int SHORT_ALPHA_ONS_FIELD_NUMBER = 2;
    private boolean hasShortAlphaOns;
    private java.lang.String shortAlphaOns_ = "";
    public java.lang.String getShortAlphaOns() { return shortAlphaOns_; }
    public boolean hasShortAlphaOns() { return hasShortAlphaOns; }
    public RspOperator setShortAlphaOns(java.lang.String value) {
      hasShortAlphaOns = true;
      shortAlphaOns_ = value;
      return this;
    }
    public RspOperator clearShortAlphaOns() {
      hasShortAlphaOns = false;
      shortAlphaOns_ = "";
      return this;
    }
    
    // optional string mcc_mnc = 3;
    public static final int MCC_MNC_FIELD_NUMBER = 3;
    private boolean hasMccMnc;
    private java.lang.String mccMnc_ = "";
    public java.lang.String getMccMnc() { return mccMnc_; }
    public boolean hasMccMnc() { return hasMccMnc; }
    public RspOperator setMccMnc(java.lang.String value) {
      hasMccMnc = true;
      mccMnc_ = value;
      return this;
    }
    public RspOperator clearMccMnc() {
      hasMccMnc = false;
      mccMnc_ = "";
      return this;
    }
    
    public final RspOperator clear() {
      clearLongAlphaOns();
      clearShortAlphaOns();
      clearMccMnc();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasLongAlphaOns()) {
        output.writeString(1, getLongAlphaOns());
      }
      if (hasShortAlphaOns()) {
        output.writeString(2, getShortAlphaOns());
      }
      if (hasMccMnc()) {
        output.writeString(3, getMccMnc());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasLongAlphaOns()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(1, getLongAlphaOns());
      }
      if (hasShortAlphaOns()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(2, getShortAlphaOns());
      }
      if (hasMccMnc()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeStringSize(3, getMccMnc());
      }
      cachedSize = size;
      return size;
    }
    
    public RspOperator mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 10: {
            setLongAlphaOns(input.readString());
            break;
          }
          case 18: {
            setShortAlphaOns(input.readString());
            break;
          }
          case 26: {
            setMccMnc(input.readString());
            break;
          }
        }
      }
    }
    
    public static RspOperator parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (RspOperator) (new RspOperator().mergeFrom(data));
    }
    
    public static RspOperator parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (RspOperator) (new RspOperator().mergeFrom(input));
    }
    
  }
  
  public static final class ReqSeparateConnection extends
      com.google.protobuf.micro.MessageMicro {
    public ReqSeparateConnection() {}
    
    // required int32 index = 1;
    public static final int INDEX_FIELD_NUMBER = 1;
    private boolean hasIndex;
    private int index_ = 0;
    public int getIndex() { return index_; }
    public boolean hasIndex() { return hasIndex; }
    public ReqSeparateConnection setIndex(int value) {
      hasIndex = true;
      index_ = value;
      return this;
    }
    public ReqSeparateConnection clearIndex() {
      hasIndex = false;
      index_ = 0;
      return this;
    }
    
    public final ReqSeparateConnection clear() {
      clearIndex();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasIndex) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasIndex()) {
        output.writeInt32(1, getIndex());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasIndex()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeInt32Size(1, getIndex());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqSeparateConnection mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setIndex(input.readInt32());
            break;
          }
        }
      }
    }
    
    public static ReqSeparateConnection parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqSeparateConnection) (new ReqSeparateConnection().mergeFrom(data));
    }
    
    public static ReqSeparateConnection parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqSeparateConnection) (new ReqSeparateConnection().mergeFrom(input));
    }
    
  }
  
  public static final class ReqSetMute extends
      com.google.protobuf.micro.MessageMicro {
    public ReqSetMute() {}
    
    // required bool state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boolean hasState;
    private boolean state_ = false;
    public boolean getState() { return state_; }
    public boolean hasState() { return hasState; }
    public ReqSetMute setState(boolean value) {
      hasState = true;
      state_ = value;
      return this;
    }
    public ReqSetMute clearState() {
      hasState = false;
      state_ = false;
      return this;
    }
    
    public final ReqSetMute clear() {
      clearState();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasState) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasState()) {
        output.writeBool(1, getState());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getState());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqSetMute mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setState(input.readBool());
            break;
          }
        }
      }
    }
    
    public static ReqSetMute parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqSetMute) (new ReqSetMute().mergeFrom(data));
    }
    
    public static ReqSetMute parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqSetMute) (new ReqSetMute().mergeFrom(input));
    }
    
  }
  
  public static final class ReqScreenState extends
      com.google.protobuf.micro.MessageMicro {
    public ReqScreenState() {}
    
    // required bool state = 1;
    public static final int STATE_FIELD_NUMBER = 1;
    private boolean hasState;
    private boolean state_ = false;
    public boolean getState() { return state_; }
    public boolean hasState() { return hasState; }
    public ReqScreenState setState(boolean value) {
      hasState = true;
      state_ = value;
      return this;
    }
    public ReqScreenState clearState() {
      hasState = false;
      state_ = false;
      return this;
    }
    
    public final ReqScreenState clear() {
      clearState();
      cachedSize = -1;
      return this;
    }
    
    public final boolean isInitialized() {
      if (!hasState) return false;
      return true;
    }
    
    public void writeTo(com.google.protobuf.micro.CodedOutputStreamMicro output)
                        throws java.io.IOException {
      if (hasState()) {
        output.writeBool(1, getState());
      }
    }
    
    private int cachedSize = -1;
    public int getCachedSize() {
      if (cachedSize < 0) {
        // getSerializedSize sets cachedSize
        getSerializedSize();
      }
      return cachedSize;
    }
    
    public int getSerializedSize() {
      int size = 0;
      if (hasState()) {
        size += com.google.protobuf.micro.CodedOutputStreamMicro
          .computeBoolSize(1, getState());
      }
      cachedSize = size;
      return size;
    }
    
    public ReqScreenState mergeFrom(
        com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      while (true) {
        int tag = input.readTag();
        switch (tag) {
          case 0:
            return this;
          default: {
            if (!parseUnknownField(input, tag)) {
              return this;
            }
            break;
          }
          case 8: {
            setState(input.readBool());
            break;
          }
        }
      }
    }
    
    public static ReqScreenState parseFrom(byte[] data)
        throws com.google.protobuf.micro.InvalidProtocolBufferMicroException {
      return (ReqScreenState) (new ReqScreenState().mergeFrom(data));
    }
    
    public static ReqScreenState parseFrom(
            com.google.protobuf.micro.CodedInputStreamMicro input)
        throws java.io.IOException {
      return (ReqScreenState) (new ReqScreenState().mergeFrom(input));
    }
    
  }
  
}
